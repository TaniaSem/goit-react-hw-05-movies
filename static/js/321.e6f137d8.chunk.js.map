{"version":3,"file":"static/js/321.e6f137d8.chunk.js","mappings":"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","sources":["Api.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst API_KEY = '6b9a3fed645205c8f486b0eeae6f2de6';\n\nexport const getPopularMovies = async () => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieCredit = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieReview = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n","import styled from 'styled-components';\n\nexport const ListBox = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { ListBox } from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ data }) => {\n  const location = useLocation();\n  return (\n    <ListBox>\n      {data.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ListBox>\n  );\n};\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FormBox = styled.form`\n  margin-top: 20px;\n  margin-left: 20px;\n  display: flex;\n  gap: 10px;\n`;\n","import { getSearchMovies } from 'Api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FormBox } from './Movies.styled';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [moviesData, setMoviesData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const handleChange = e => {\n    e.preventDefault();\n    console.log(e.target.value);\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: query });\n    setQuery('');\n  };\n\n  useEffect(() => {\n    if (searchQuery === '' || searchQuery === null) return;\n\n    async function fetchByQuery() {\n      try {\n        setIsLoading(true);\n        const { results } = await getSearchMovies(searchQuery);\n        setMoviesData(results);\n      } catch (error) {\n        alert('Something went wrong. Try again');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchByQuery();\n  }, [searchQuery]);\n\n  return (\n    <div>\n      <FormBox onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchKey\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Search</button>\n      </FormBox>\n      {isLoading && <div>Loading...</div>}\n      {moviesData && <MoviesList data={moviesData} />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","getPopularMovies","axios","responce","console","log","data","Notiflix","Error","getSearchMovies","query","getMovieDetails","id","getMovieCredit","getMovieReview","ListBox","styled","MoviesList","location","useLocation","map","movie","to","state","from","title","FormBox","useState","setQuery","moviesData","setMoviesData","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","results","alert","fetchByQuery","onSubmit","e","preventDefault","type","name","value","autoComplete","autoFocus","onChange","target"],"sourceRoot":""}