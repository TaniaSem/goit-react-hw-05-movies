{"version":3,"file":"static/js/139.bfe6023f.chunk.js","mappings":"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","sources":["Api.js","components/MovieInfo/MovieInfo.styled.js","components/MovieInfo/MovieInfo.js","pages/MovieCard/MovieCard.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst API_KEY = '6b9a3fed645205c8f486b0eeae6f2de6';\n\nexport const getPopularMovies = async () => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieCredit = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieReview = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n","import styled from 'styled-components';\n\nexport const InfoBox = styled.div`\n  padding: 20px 50px;\n  width: 600px;\n`;\n","import { useLocation, useParams, Link } from 'react-router-dom';\nimport { InfoBox } from './MovieInfo.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieInfo = ({ data }) => {\n  const location = useLocation();\n  const { movieId } = useParams();\n\n  const { genres, poster_path, title, vote_average, overview } = data;\n  const genresNames = genres.map(genre => genre.name).join(` `);\n  const posterUrl = `https://image.tmdb.org/t/p/w200${poster_path}`;\n  const rating = vote_average.toFixed(1) * 10;\n\n  return (\n    <InfoBox>\n      <img src={posterUrl} alt={title} />\n      <div>\n        <h2>{title}</h2>\n        <p>User Score: {rating}%</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genresNames}</p>\n      </div>\n      <div>\n        Additional information\n        <ul>\n          <li>\n            <Link\n              to={`/movies/${movieId}/cast`}\n              state={{ from: location.state?.from ?? '/' }}\n            >\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link\n              to={`/movies/${movieId}/reviews`}\n              state={{ from: location.state?.from ?? '/' }}\n            >\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </InfoBox>\n  );\n};\n\nMovieInfo.propTypes = {\n  data: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    original_title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }),\n};\n","import { getMovieDetails } from 'Api';\nimport { MovieInfo } from 'components/MovieInfo/MovieInfo';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nconst MovieCard = () => {\n  const [movieData, setMovieData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        setIsLoading(true);\n        const result = await getMovieDetails(movieId);\n        setMovieData(result);\n      } catch (error) {\n        alert('Something went wrong. Try again');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={location.state?.from ?? '/'}>Go back</Link>\n      {isLoading && <div>Loading...</div>}\n      {movieData && <MovieInfo data={movieData} />}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieCard;\n"],"names":["API_KEY","getPopularMovies","axios","responce","console","log","data","Notiflix","Error","getSearchMovies","query","getMovieDetails","id","getMovieCredit","getMovieReview","InfoBox","styled","MovieInfo","location","useLocation","movieId","useParams","genres","poster_path","title","vote_average","overview","genresNames","map","genre","name","join","posterUrl","rating","toFixed","src","alt","to","state","from","useState","movieData","setMovieData","isLoading","setIsLoading","useEffect","result","alert","fetchMovie","Suspense","fallback"],"sourceRoot":""}