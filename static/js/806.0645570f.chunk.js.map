{"version":3,"file":"static/js/806.0645570f.chunk.js","mappings":"gUAGMA,EAAU,mCAEHC,EAAgB,mCAAG,6GAELC,EAAAA,GAAAA,IAAA,kEACsCF,IAHjC,cAEtBG,EAFsB,OAK5BC,QAAQC,IAAIF,EAASG,MALO,kBAMrBH,EAASG,MANY,sCAQ5BC,IAAAA,OAAAA,QAAA,sCACM,IAAIC,MAAJ,kCATsB,yDAAH,qDAahBC,EAAe,mCAAG,WAAMC,GAAN,gGAEJR,EAAAA,GAAAA,IAAA,4DACgCF,EADhC,iCACgEU,EADhE,gCAFI,cAErBP,EAFqB,OAK3BC,QAAQC,IAAIF,EAASG,MALM,kBAMpBH,EAASG,MANW,sCAQ3BC,IAAAA,OAAAA,QAAA,sCACM,IAAIC,MAAJ,kCATqB,yDAAH,sDAafG,EAAe,mCAAG,WAAMC,GAAN,gGAEJV,EAAAA,GAAAA,IAAA,6CACiBU,EADjB,oBAC+BZ,EAD/B,oBAFI,cAErBG,EAFqB,OAK3BC,QAAQC,IAAIF,EAASG,MALM,kBAMpBH,EAASG,MANW,sCAQ3BC,IAAAA,OAAAA,QAAA,sCACM,IAAIC,MAAJ,kCATqB,yDAAH,sDAafK,EAAc,mCAAG,WAAMD,GAAN,gGAEHV,EAAAA,GAAAA,IAAA,6CACiBU,EADjB,4BACuCZ,EADvC,oBAFG,cAEpBG,EAFoB,OAK1BC,QAAQC,IAAIF,EAASG,MALK,kBAMnBH,EAASG,MANU,sCAQ1BC,IAAAA,OAAAA,QAAA,sCACM,IAAIC,MAAJ,kCAToB,yDAAH,sDAadM,EAAc,mCAAG,WAAMF,GAAN,gGAEHV,EAAAA,GAAAA,IAAA,6CACiBU,EADjB,4BACuCZ,EADvC,oBAFG,cAEpBG,EAFoB,OAK1BC,QAAQC,IAAIF,EAASG,MALK,kBAMnBH,EAASG,MANU,sCAQ1BC,IAAAA,OAAAA,QAAA,sCACM,IAAIC,MAAJ,kCAToB,yDAAH,qD,iJCvDdO,E,OAAUC,GAAAA,IAAH,gE,SC6CpB,EA1CgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIH,GAAa,GAFjB,UAG8BP,EAAAA,EAAAA,IAAeQ,GAH7C,gBAGYG,EAHZ,EAGYA,QACRN,EAAWM,GAJf,gDAMIC,MAAM,mCANV,yBAQIL,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdM,EACD,GAAE,CAACL,KAGF,UAACP,EAAD,WACGK,IAAa,wCACbF,EAAQU,OAAS,GAChB,wBACGV,EAAQW,KAAI,SAAAC,GACX,OACE,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOlB,GAKnB,OAGH,uEAIP,C","sources":["Api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst API_KEY = '6b9a3fed645205c8f486b0eeae6f2de6';\n\nexport const getPopularMovies = async () => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieCredit = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n\nexport const getMovieReview = async id => {\n  try {\n    const responce = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    console.log(responce.data);\n    return responce.data;\n  } catch (error) {\n    Notiflix.Notify.failure(`Sorry, try again ${error} `);\n    throw new Error(`Sorry, try again ${error}`);\n  }\n};\n","import styled from 'styled-components';\n\nexport const InfoBox = styled.div`\n  padding: 20px 50px;\n  width: 600px;\n`;\n","import { getMovieReview } from 'Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { InfoBox } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchReviews() {\n      try {\n        setIsLoading(true);\n        const { results } = await getMovieReview(movieId);\n        setReviews(results);\n      } catch (error) {\n        alert('Something went wrong. Try again');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <InfoBox>\n      {isLoading && <div>Loading...</div>}\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <h3>{review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </InfoBox>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","getPopularMovies","axios","responce","console","log","data","Notiflix","Error","getSearchMovies","query","getMovieDetails","id","getMovieCredit","getMovieReview","InfoBox","styled","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","results","alert","fetchReviews","length","map","review","author","content"],"sourceRoot":""}